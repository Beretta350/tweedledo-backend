// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Projects\tweedledo-backend\core\ports\task_ports.go

// Package mocks is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/tweedledo/core/domain"
)

// MockTaskServiceInterface is a mock of TaskServiceInterface interface.
type MockTaskServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceInterfaceMockRecorder
}

// MockTaskServiceInterfaceMockRecorder is the mock recorder for MockTaskServiceInterface.
type MockTaskServiceInterfaceMockRecorder struct {
	mock *MockTaskServiceInterface
}

// NewMockTaskServiceInterface creates a new mock instance.
func NewMockTaskServiceInterface(ctrl *gomock.Controller) *MockTaskServiceInterface {
	mock := &MockTaskServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTaskServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskServiceInterface) EXPECT() *MockTaskServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskServiceInterface) CreateTask(name, desc, tasklistId string) (*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", name, desc, tasklistId)
	ret0, _ := ret[0].(*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskServiceInterfaceMockRecorder) CreateTask(name, desc, tasklistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskServiceInterface)(nil).CreateTask), name, desc, tasklistId)
}

// DeleteTaskById mocks base method.
func (m *MockTaskServiceInterface) DeleteTaskById(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskById", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTaskById indicates an expected call of DeleteTaskById.
func (mr *MockTaskServiceInterfaceMockRecorder) DeleteTaskById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskById", reflect.TypeOf((*MockTaskServiceInterface)(nil).DeleteTaskById), id)
}

// GetTaskById mocks base method.
func (m *MockTaskServiceInterface) GetTaskById(id string) (*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", id)
	ret0, _ := ret[0].(*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskById indicates an expected call of GetTaskById.
func (mr *MockTaskServiceInterfaceMockRecorder) GetTaskById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockTaskServiceInterface)(nil).GetTaskById), id)
}

// UpdateTask mocks base method.
func (m *MockTaskServiceInterface) UpdateTask(id, name, desc string) (*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", id, name, desc)
	ret0, _ := ret[0].(*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskServiceInterfaceMockRecorder) UpdateTask(id, name, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskServiceInterface)(nil).UpdateTask), id, name, desc)
}

// MockTaskRepositoryInterface is a mock of TaskRepositoryInterface interface.
type MockTaskRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryInterfaceMockRecorder
}

// MockTaskRepositoryInterfaceMockRecorder is the mock recorder for MockTaskRepositoryInterface.
type MockTaskRepositoryInterfaceMockRecorder struct {
	mock *MockTaskRepositoryInterface
}

// NewMockTaskRepositoryInterface creates a new mock instance.
func NewMockTaskRepositoryInterface(ctrl *gomock.Controller) *MockTaskRepositoryInterface {
	mock := &MockTaskRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepositoryInterface) EXPECT() *MockTaskRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskRepositoryInterface) CreateTask(task *domain.Task) (*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task)
	ret0, _ := ret[0].(*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskRepositoryInterfaceMockRecorder) CreateTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).CreateTask), task)
}

// DeleteTaskById mocks base method.
func (m *MockTaskRepositoryInterface) DeleteTaskById(id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskById", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTaskById indicates an expected call of DeleteTaskById.
func (mr *MockTaskRepositoryInterfaceMockRecorder) DeleteTaskById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskById", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).DeleteTaskById), id)
}

// GetTaskById mocks base method.
func (m *MockTaskRepositoryInterface) GetTaskById(id string) (*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", id)
	ret0, _ := ret[0].(*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskById indicates an expected call of GetTaskById.
func (mr *MockTaskRepositoryInterfaceMockRecorder) GetTaskById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).GetTaskById), id)
}

// GetTasksInTaskList mocks base method.
func (m *MockTaskRepositoryInterface) GetTasksInTaskList(tasklistId string) ([]*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksInTaskList", tasklistId)
	ret0, _ := ret[0].([]*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksInTaskList indicates an expected call of GetTasksInTaskList.
func (mr *MockTaskRepositoryInterfaceMockRecorder) GetTasksInTaskList(tasklistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksInTaskList", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).GetTasksInTaskList), tasklistId)
}

// UpdateTask mocks base method.
func (m *MockTaskRepositoryInterface) UpdateTask(task *domain.Task) (*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", task)
	ret0, _ := ret[0].(*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskRepositoryInterfaceMockRecorder) UpdateTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).UpdateTask), task)
}
